{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","reducers/TodosReducer.js","contexts/TodosContext.js","hooks/useLocalStorageReducer.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggleState","initialVal","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","state","setState","useInputState","value","setValue","e","target","reducer","action","type","concat","toConsumableArray","id","uuid","task","completed","filter","todo","map","objectSpread","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","_useLocalStorageReduc","key","defaultVal","_useReducer","useReducer","JSON","parse","window","localStorage","getItem","String","_useReducer2","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","_useLocalStorageReduc2","todos","react_default","a","createElement","Provider","children","EditTodoForm","_ref","toggleEditForm","useContext","_useInputState","_useInputState2","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","memo","_useToggleState","_useToggleState2","isEditing","toggle","ListItem","height","src_EditTodoForm","Fragment","Checkbox","tabIndex","c","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","Delete_default","Edit_default","TodoList","Paper","List","i","src_Todo","assign","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","src_TodoForm","src_TodoList","App","src_TodoApp","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAYeA,MAVf,WAA4C,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAG,EAEdC,mBAASL,GAFKM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjCK,EAFiCH,EAAA,GAE1BI,EAF0BJ,EAAA,GAOxC,MAAO,CAACG,EAJO,WACXC,GAAUD,MCJHE,EAAA,SAAAX,GAAc,IAAAI,EACCC,mBAASL,GADVM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBQ,EADkBN,EAAA,GACXO,EADWP,EAAA,GAQzB,MAAO,CAACM,EANa,SAAAE,GACjBD,EAASC,EAAEC,OAAOH,QAER,WACVC,EAAS,qDCaFG,EAnBC,SAACP,EAAOQ,GACpB,OAAOA,EAAOC,MACV,IAAK,MACD,SAAAC,OAAAZ,OAAAa,EAAA,EAAAb,CAAWE,GAAX,CAAkB,CAACY,GAAIC,MAAQC,KAAMN,EAAOM,KAAMC,WAAW,KACjE,IAAK,SACD,OAAOf,EAAMgB,OAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOJ,EAAOI,KACnD,IAAK,SACD,OAAOZ,EAAMkB,IAAI,SAAAD,GAAI,OACjBA,EAAKL,KAAOJ,EAAOI,GAAnBd,OAAAqB,EAAA,EAAArB,CAAA,GAA4BmB,EAA5B,CAAkCF,WAAYE,EAAKF,YAAaE,IAExE,IAAK,OACD,OAAOjB,EAAMkB,IAAI,SAAAD,GAAI,OACjBA,EAAKL,KAAOJ,EAAOI,GAAnBd,OAAAqB,EAAA,EAAArB,CAAA,GAA4BmB,EAA5B,CAAkCH,KAAMN,EAAOY,UAAWH,IAElE,QACQ,OAAOjB,ICbjBqB,EAAe,CACjB,CAACT,GAAI,EAAGE,KAAM,eAAgBC,WAAW,GACzC,CAACH,GAAI,EAAGE,KAAM,mBAAoBC,WAAW,IAEpCO,EAAeC,0BACfC,EAAkBD,0BAExB,SAASE,EAAcC,GAAO,IAAAC,ECTrC,SAAgCC,EAAKC,EAAYtB,GAAS,IAAAuB,EAC5BC,qBAAWxB,EAASsB,EAAY,WACtD,IAAI1B,EACJ,IACIA,EAAQ6B,KAAKC,MACTC,OAAOC,aAAaC,QAAQR,IAAQS,OAAOR,IAEjD,MAAMxB,GACJF,EAAQ0B,EAEZ,OAAO1B,IAV2CmC,EAAAxC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAC/C9B,EAD+CsC,EAAA,GACxCC,EADwCD,EAAA,GAetD,OAHAE,oBAAU,WACNN,OAAOC,aAAaM,QAAQb,EAAKI,KAAKU,UAAU1C,KACjD,CAACA,IACG,CAACA,EAAOuC,GDLWI,CACtB,QACCtB,EACAuB,GAJ4BC,EAAA/C,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAC1BmB,EAD0BD,EAAA,GACnBN,EADmBM,EAAA,GAOjC,OACIE,EAAAC,EAAAC,cAAC3B,EAAa4B,SAAd,CAAuB/C,MAAO2C,GAC1BC,EAAAC,EAAAC,cAACzB,EAAgB0B,SAAjB,CAA0B/C,MAAOoC,GAC5Bb,EAAMyB,WEQRC,MAxBf,SAAAC,GAAkD,IAA3BzC,EAA2ByC,EAA3BzC,GAAIE,EAAuBuC,EAAvBvC,KAAMwC,EAAiBD,EAAjBC,eACvBf,EAAWgB,qBAAW/B,GADkBgC,EAETtD,EAAcY,GAFL2C,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAEvCrD,EAFuCsD,EAAA,GAEhCC,EAFgCD,EAAA,GAElBE,EAFkBF,EAAA,GAG9C,OACIV,EAAAC,EAAAC,cAAA,QACIW,SAAU,SAACvD,GACPA,EAAEwD,iBACFtB,EAAS,CAAC9B,KAAM,OAAQG,GAAIA,EAAIQ,QAASjB,IACzCwD,IACAL,KAEJQ,MAAO,CAACC,WAAY,OAAQC,MAAO,QAEnCjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,OAAO,SACP/D,MAAOA,EACPgE,SAAUT,EACVU,WAAS,EACTC,WAAS,qFCkBVC,qBAjCf,SAAAjB,GAAqC,IAAtBzC,EAAsByC,EAAtBzC,GAAIE,EAAkBuC,EAAlBvC,KAAMC,EAAYsC,EAAZtC,UACfwB,EAAWgB,qBAAW/B,GADK+C,EAELjF,IAFKkF,EAAA1E,OAAAC,EAAA,EAAAD,CAAAyE,EAAA,GAE1BE,EAF0BD,EAAA,GAEfE,EAFeF,EAAA,GAGjC,OACIzB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUb,MAAO,CAACc,OAAQ,SACrBH,EACG1B,EAAAC,EAAAC,cAAC4B,EAAD,CAAcjE,GAAIA,EAAIE,KAAMA,EAAMwC,eAAgBoB,IAElD3B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACI/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACIC,UAAW,EAAGC,GAAC,EACfC,QAASnE,EACToE,QAAS,kBAAM5C,EAAS,CAAC9B,KAAM,SAAUG,GAAIA,OAEjDmC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACItB,MAAO,CAACuB,eAAgBtE,EAAY,eAAiB,SAEpDD,GAELiC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACIvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAYC,aAAW,SAASL,QAAS,kBAAM5C,EAAS,CAAC9B,KAAM,SAAUG,GAAIA,MACzEmC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,OAEJD,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAYC,aAAW,OAAOL,QAAST,GACnC3B,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,YCPb2C,MApBf,WACI,IAAM7C,EAAQS,qBAAWjC,GACzB,OAAGwB,EAAMrD,OAELsD,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACI7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACK/C,EAAM5B,IAAI,SAACD,EAAM6E,GAAP,OAGP/C,EAAAC,EAAAC,cAACF,EAAAC,EAAM8B,SAAP,CAAgBlD,IAAKkE,GACjB/C,EAAAC,EAAAC,cAAC8C,EAADjG,OAAAkG,OAAA,GAAU/E,EAAV,CAAgBW,IAAKX,EAAKL,MACzBkF,EAAIhD,EAAMrD,OAAS,GAAKsD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,WAMtC,MCKIC,MAtBf,WAAoB,IAAA1C,EACqBtD,EAAc,IADnCuD,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GACTrD,EADSsD,EAAA,GACFC,EADED,EAAA,GACYE,EADZF,EAAA,GAEVlB,EAAWgB,qBAAW/B,GAC5B,OACIuB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO9B,MAAO,CAACI,OAAQ,SAAUiC,QAAS,WACtCpD,EAAAC,EAAAC,cAAA,QAAMW,SAAU,SAAAvD,GACZA,EAAEwD,iBACFtB,EAAS,CAAC9B,KAAM,MAAOK,KAAMX,IAC7BwD,MAEAZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACI9D,MAAOA,EACPgE,SAAUT,EACVQ,OAAO,SACPkC,MAAM,eACNhC,WAAS,OCcdiC,MA5Bf,WACI,OACItD,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CACI9B,MAAO,CACHqC,QAAS,EACTjC,OAAQ,EACRU,OAAQ,QACR0B,gBAAiB,WAErBC,UAAW,GAEXxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAAS5C,MAAO,CAACc,OAAQ,SACtD7B,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACI5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAYH,MAAM,WAAlB,sBAGR1D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASjD,MAAO,CAACkD,UAAW,SAChDjE,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BrE,EAAAC,EAAAC,cAACxB,EAAD,KACIsB,EAAAC,EAAAC,cAACoE,EAAD,MACAtE,EAAAC,EAAAC,cAACqE,EAAD,WCnBTC,MAJf,WACE,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,OCQWC,QACW,cAA7BvF,OAAOwF,SAASC,UAEe,UAA7BzF,OAAOwF,SAASC,UAEhBzF,OAAOwF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.503f889b.chunk.js","sourcesContent":["import {useState} from 'react';\r\n\r\nfunction useToggleState(initialVal = false) {\r\n    // call useState, 'reserve piece of state'\r\n    const [state, setState] = useState(initialVal);\r\n    const toggle = () => {\r\n        setState(!state);\r\n    };\r\n    // return piece of state AND a funtion to toggle it\r\n    return [state, toggle];\r\n}\r\n\r\nexport default useToggleState;\r\n","import {useState} from 'react';\r\n\r\nexport default initialVal => {\r\n    const [value, setValue] = useState(initialVal);\r\n    const handleChange = e => {\r\n        setValue(e.target.value);\r\n    };\r\n    const reset = () => {\r\n        setValue('');\r\n    };\r\n    return [value, handleChange, reset];\r\n};","import uuid from 'uuid/v4';\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'ADD':\r\n            return [...state, {id: uuid(), task: action.task, completed: false}];\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        case 'TOGGLE':\r\n            return state.map(todo => \r\n                todo.id === action.id ? {...todo, completed: !todo.completed} : todo\r\n            );\r\n        case 'EDIT':\r\n            return state.map(todo => \r\n                todo.id === action.id ? {...todo, task: action.newTask} : todo\r\n            );\r\n        default: \r\n                return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\n// const addTodo = newTodoText => {\r\n//     setTodos([...todos, {id: uuid(), task: newTodoText, completed: false}]);\r\n// };\r\n// const removeTodo = todoId => {\r\n//     // filter out removed todo\r\n//     const updatedTodos = todos.filter(todo => todo.id !== todoId);\r\n//     // call setTodos with new todos array\r\n//     setTodos(updatedTodos);\r\n// };\r\n// const toggleTodo = todoId => {\r\n//     const updatedTodos = todos.map(todo => \r\n//         todo.id === todoId ? {...todo, completed: !todo.completed} : todo\r\n//     );\r\n//     setTodos(updatedTodos);\r\n// };\r\n// const editTodo = (todoId, newTask) => {\r\n//     const updatedTodos = todos.map(todo => \r\n//         todo.id === todoId ? {...todo, task: newTask} : todo\r\n//     );\r\n//     setTodos(updatedTodos);\r\n// }","import React, {createContext} from 'react';\r\nimport {useLocalStorageReducer} from '../hooks/useLocalStorageReducer';\r\nimport todoReducer from '../reducers/TodosReducer';\r\n\r\nconst defaultTodos = [\r\n    {id: 1, task: 'Mow the lawn', completed: false},\r\n    {id: 2, task: 'Dress the garden', completed: true}\r\n];\r\nexport const TodosContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport function TodosProvider(props) {\r\n    const [todos, dispatch] = useLocalStorageReducer(\r\n        'todos',\r\n         defaultTodos,\r\n         todoReducer\r\n    );\r\n\r\n    return (\r\n        <TodosContext.Provider value={todos}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n             </DispatchContext.Provider>\r\n        </TodosContext.Provider>\r\n    );\r\n};\r\n","import {useReducer, useEffect} from 'react';\r\n\r\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\r\n    const [state, dispatch] = useReducer(reducer, defaultVal, () => {\r\n        let value;\r\n        try {\r\n            value = JSON.parse(\r\n                window.localStorage.getItem(key) || String(defaultVal)\r\n            );\r\n        } catch(e) {\r\n            value = defaultVal;\r\n        }\r\n        return value;\r\n    })\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(state));\r\n    }, [state]);\r\n    return [state, dispatch];\r\n}\r\n\r\nexport {useLocalStorageReducer};\r\n","import React, {useContext} from 'react';\r\nimport useInputState from './hooks/useInputState';\r\nimport { TextField } from '@material-ui/core';\r\nimport {DispatchContext} from './contexts/TodosContext';\r\n\r\nfunction EditTodoForm({id, task, toggleEditForm}) {\r\n    const dispatch = useContext(DispatchContext);\r\n    const [value, handleChange, reset] = useInputState(task);\r\n    return (\r\n        <form \r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                dispatch({type: 'EDIT', id: id, newTask: value});\r\n                reset();\r\n                toggleEditForm();\r\n            }}\r\n            style={{marginLeft: '1rem', width: '50%'}}\r\n        >\r\n            <TextField \r\n                margin='normal' \r\n                value={value} \r\n                onChange={handleChange} \r\n                fullWidth\r\n                autoFocus\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditTodoForm;\r\n","import React, {useContext, memo} from 'react';\r\nimport useToggleState from './hooks/useToggleState';\r\nimport EditTodoForm from './EditTodoForm';\r\nimport {ListItem, ListItemText, Checkbox, IconButton, ListItemSecondaryAction} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {DispatchContext} from './contexts/TodosContext';\r\n\r\nfunction Todo({id, task, completed}) {\r\n    const dispatch = useContext(DispatchContext);\r\n    const [isEditing, toggle] = useToggleState();\r\n    return (\r\n        <ListItem style={{height: '64px'}}>\r\n            {isEditing ? (\r\n                <EditTodoForm id={id} task={task} toggleEditForm={toggle} /> \r\n             ) : (\r\n                <>\r\n                    <Checkbox \r\n                        tabIndex={-1} c\r\n                        checked={completed} \r\n                        onClick={() => dispatch({type: 'TOGGLE', id: id})} \r\n                    />\r\n                    <ListItemText \r\n                        style={{textDecoration: completed ? 'line-through' : 'none'}}\r\n                    >\r\n                        {task}\r\n                    </ListItemText>\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton aria-label='Delete' onClick={() => dispatch({type: 'REMOVE', id: id})}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                        <IconButton aria-label='Edit' onClick={toggle} >\r\n                            <EditIcon />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </>\r\n            )}\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default memo(Todo);","import React, {useContext} from 'react';\r\nimport { Paper, List, Divider } from '@material-ui/core';\r\nimport Todo from './Todo';\r\nimport {TodosContext} from './contexts/TodosContext';\r\n\r\nfunction TodoList() {\r\n    const todos = useContext(TodosContext);\r\n    if(todos.length)\r\n    return (\r\n        <Paper>\r\n            <List>\r\n                {todos.map((todo, i) => (\r\n                    // To add a key to a fragment, we have to use the long-hand version\r\n                    // rather than <> </>, we have to use <React.Fragment>\r\n                    <React.Fragment key={i}>\r\n                        <Todo {...todo} key={todo.id} />\r\n                        {i < todos.length - 1 && <Divider/>}\r\n                    </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n    return null;\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {useContext} from 'react';\r\nimport {TextField, Paper} from '@material-ui/core';\r\nimport useInputState from './hooks/useInputState';\r\nimport {DispatchContext} from './contexts/TodosContext';\r\n\r\nfunction TodoForm() {\r\n    const [value, handleChange, reset] = useInputState('');\r\n    const dispatch = useContext(DispatchContext);\r\n    return (\r\n        <Paper style={{margin: '1rem 0', padding: '0 1rem'}}>\r\n            <form onSubmit={e => {\r\n                e.preventDefault();\r\n                dispatch({type: 'ADD', task: value});\r\n                reset();\r\n            }}>\r\n                <TextField \r\n                    value={value} \r\n                    onChange={handleChange}\r\n                    margin='normal'\r\n                    label='Add New Todo'\r\n                    fullWidth\r\n                />\r\n            </form>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport {Typography, Paper, AppBar, Toolbar, Grid} from '@material-ui/core';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\nimport {TodosProvider} from './contexts/TodosContext';\r\n\r\nfunction TodoApp() {\r\n    return (\r\n        <Paper\r\n            style={{\r\n                padding: 0,\r\n                margin: 0,\r\n                height: '100vh',\r\n                backgroundColor: '#fafafa'\r\n            }}\r\n            elevation={0}\r\n        >\r\n            <AppBar color='primary' position='static' style={{height: '64px'}}>\r\n                <Toolbar>\r\n                    <Typography color='inherit'>TODOS WITH HOOKS</Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container justify='center' style={{marginTop: '1rem'}}>\r\n                <Grid item xs={11} md={8} lg={4}>\r\n                    <TodosProvider>\r\n                        <TodoForm />\r\n                        <TodoList />\r\n                    </TodosProvider>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TodoApp;\r\n","import React from 'react';\nimport TodoApp from './TodoApp';\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}